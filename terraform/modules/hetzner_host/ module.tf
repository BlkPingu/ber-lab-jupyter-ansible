variable "name" { type = string }
variable "server_type" { type = string }
variable "volume_size" { type = number }
variable "network_id" { type = string }
variable "internal_ips" { type = map(any) }
variable "extra_ports_tcp" {
  type    = list(number)
  default = []
}
variable "extra_ports_udp" {
  type    = list(number)
  default = []
}
variable "monitoring_ports" {
  type    = bool
  default = false
}
variable "delete_protection" {
  type    = bool
  default = false
}
variable "keep_disk" {
  type    = bool
  default = true
}
variable "dns_zone_ids" {
  type = string
}
variable "ttl" {
  type    = number
  default = 300
}

# Firewall

resource "hcloud_firewall" "firewall" {
  name = "${var.name}_firewall"
  rule {
    direction = "in"
    protocol  = "icmp"
    source_ips = [
      "0.0.0.0/0",
      "::/0"
    ]
  }

  rule {
    direction = "in"
    protocol  = "tcp"
    port      = "80"
    source_ips = [
      "0.0.0.0/0",
      "::/0"
    ]
  }

  rule {
    direction = "in"
    protocol  = "tcp"
    port      = "443"
    source_ips = [
      "0.0.0.0/0",
      "::/0"
    ]
  }

  rule {
    direction = "in"
    protocol  = "tcp"
    port      = "22"
    source_ips = [
      "0.0.0.0/0",
      "::/0"
    ]
  }

  dynamic "rule" {
    for_each = var.extra_ports_tcp
    content {
      direction = "in"
      protocol  = "tcp"
      port      = rule.value
      source_ips = [
        "0.0.0.0/0",
        "::/0"
      ]
    }
  }

  dynamic "rule" {
    for_each = var.extra_ports_udp
    content {
      direction = "in"
      protocol  = "udp"
      port      = rule.value
      source_ips = [
        "0.0.0.0/0",
        "::/0"
      ]
    }
  }
}

# Server
resource "hcloud_server" "server" {
  name               = var.name
  image              = "debian-11"
  server_type        = var.server_type
  location           = "nbg1"
  user_data          = templatefile("${path.module}/cloud_init.tpl", { ssh_key = file("~/.ssh/id_ed25519.pub") })
  firewall_ids       = [hcloud_firewall.firewall.id]
  backups            = false
  keep_disk          = var.keep_disk
  delete_protection  = var.delete_protection
  rebuild_protection = var.delete_protection

  network {
    network_id = var.network_id
    ip         = var.internal_ips[var.name]
  }

  lifecycle {
    ignore_changes = [
      user_data,
      image
    ]
  }
}

# resource "hcloud_volume" "volume_0" {
#   name              = "${var.name}_volume_0"
#   size              = var.volume_size
#   server_id         = hcloud_server.server.id
#   delete_protection = var.delete_protection
# }

# DNS
resource "hetznerdns_record" "ipv4" {
  zone_id = var.dns_zone_ids
  name    = var.name
  value   = hcloud_server.server.ipv4_address
  type    = "A"
  ttl     = var.ttl
}

resource "hetznerdns_record" "ipv6" {
  zone_id = var.dns_zone_ids
  name    = var.name
  value   = hcloud_server.server.ipv6_address
  type    = "AAAA"
  ttl     = var.ttl
}

resource "hetznerdns_record" "ipv4_w" {
  zone_id = var.dns_zone_ids
  name    = "*.${var.name}"
  value   = hcloud_server.server.ipv4_address
  type    = "A"
  ttl     = var.ttl
}

resource "hetznerdns_record" "ipv6_w" {
  zone_id = var.dns_zone_ids
  name    = "*.${var.name}"
  value   = hcloud_server.server.ipv6_address
  type    = "AAAA"
  ttl     = var.ttl
}


output "attributes" {
  value = tomap({
    "public_ipv4"  = hcloud_server.server.ipv4_address,
    "private_ipv4" = var.internal_ips[var.name]
    "public_ipv6"  = hcloud_server.server.ipv6_address,
    "subnet_ipv6"  = hcloud_server.server.ipv6_network,
    # "volume"       = hcloud_volume.volume_0.linux_device,
    "hostname" = var.name
  })
}

# # Export Terraform variable values to an Ansible var_file
# resource "local_file" "tf_ansible_vars_file_new" {
#   content  = <<-DOC
#     # Ansible vars_file containing variable values from Terraform.
#     # Generated by Terraform mgmt configuration.

#     public_v4: ${hcloud_server.server.ipv4_address}
#     private_v4: ${var.internal_ips[var.name]}
#     public_v6: ${hcloud_server.server.ipv6_address}
#     subnet_v6: ${hcloud_server.server.ipv6_network}
#     hostname: ${var.name}
#     DOC
#   filename = "./tf_ansible_vars_${var.name}.yml"
# }
